{"ast":null,"code":"import store from \"../redux/store\";\nexport const ZOMBIE_COUNT = \"ZOMBIE_COUNT\"; // action type\n// action creator (dispatch sends this to redux reducer)\n\nfunction campaignCount(data) {\n  return {\n    type: ZOMBIE_COUNT,\n    payload: data\n  };\n} //\n//  set up the blockchain shadow contract, user address, and user campaign count.  Put into redux store.\n//\n\n\nasync function getCampaignCount(CZ, userAddress) {\n  // get number of campaigns owned by the user account\n  let userCampaignCount = +(await CZ.balanceOf(userAddress)); // + convert a string to an integer\n  // do a binary search to estimate total campaign count.\n  // It is a real shame that the Cryptocampaigns contract doesn't totally comply with ERC720 to include a function\n  // that returns totalCampaignount.\n\n  var high = 8192;\n  var low = 0;\n  var middle = 4096;\n\n  while (low < high) {\n    try {\n      await CZ.campaigns(middle);\n      low = middle + 1;\n      middle = Math.floor(low + (high - low) / 2);\n    } catch {\n      high = middle - 1;\n      middle = Math.floor(low + (high - low) / 2);\n    }\n  } // put state data into the REDUX store for easy access from other pages and components\n\n\n  let data = {\n    totalCampaignCount: Math.max(low - 1, 1),\n    // from binary search\n    userCampaignCount //EC7 shorthand for totalCampaignCount:totalCampaignCount because of same variable name\n\n  };\n  store.dispatch(campaignCount(data));\n}\n\nexport default getCampaignCount;","map":{"version":3,"sources":["/home/moose970/Documents/workspace/Classes/CS458Blockchain/BlockStarter/blockStarterDapp/src/utils/getCampaignCount.js"],"names":["store","ZOMBIE_COUNT","campaignCount","data","type","payload","getCampaignCount","CZ","userAddress","userCampaignCount","balanceOf","high","low","middle","campaigns","Math","floor","totalCampaignCount","max","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG,cAArB,C,CAAqC;AAE5C;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAEH,YADD;AAELI,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,C,CAED;AACA;AACA;;;AAEA,eAAeG,gBAAf,CAAgCC,EAAhC,EAAoCC,WAApC,EAAiD;AAC/C;AACA,MAAIC,iBAAiB,GAAG,EAAE,MAAMF,EAAE,CAACG,SAAH,CAAaF,WAAb,CAAR,CAAxB,CAF+C,CAEc;AAE7D;AACA;AACA;;AAEA,MAAIG,IAAI,GAAG,IAAX;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,MAAM,GAAG,IAAb;;AAEA,SAAOD,GAAG,GAAGD,IAAb,EAAmB;AACf,QAAI;AACJ,YAAMJ,EAAE,CAACO,SAAH,CAAaD,MAAb,CAAN;AACAD,MAAAA,GAAG,GAAGC,MAAM,GAAG,CAAf;AACAA,MAAAA,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,CAACD,IAAI,GAAGC,GAAR,IAAe,CAAhC,CAAT;AACD,KAJC,CAIA,MAAM;AACND,MAAAA,IAAI,GAAGE,MAAM,GAAG,CAAhB;AACAA,MAAAA,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,CAACD,IAAI,GAAGC,GAAR,IAAe,CAAhC,CAAT;AACD;AACF,GArB8C,CAuB/C;;;AAEA,MAAIT,IAAI,GAAG;AACTc,IAAAA,kBAAkB,EAAEF,IAAI,CAACG,GAAL,CAASN,GAAG,GAAC,CAAb,EAAgB,CAAhB,CADX;AACiC;AAC1CH,IAAAA,iBAFS,CAEkB;;AAFlB,GAAX;AAKAT,EAAAA,KAAK,CAACmB,QAAN,CAAejB,aAAa,CAACC,IAAD,CAA5B;AACD;;AAED,eAAeG,gBAAf","sourcesContent":["import store from \"../redux/store\";\n\nexport const ZOMBIE_COUNT = \"ZOMBIE_COUNT\"; // action type\n\n// action creator (dispatch sends this to redux reducer)\nfunction campaignCount(data) {\n  return {\n    type: ZOMBIE_COUNT,\n    payload: data\n  };\n}\n\n//\n//  set up the blockchain shadow contract, user address, and user campaign count.  Put into redux store.\n//\n\nasync function getCampaignCount(CZ, userAddress) {\n  // get number of campaigns owned by the user account\n  let userCampaignCount = +(await CZ.balanceOf(userAddress));  // + convert a string to an integer\n\n  // do a binary search to estimate total campaign count.\n  // It is a real shame that the Cryptocampaigns contract doesn't totally comply with ERC720 to include a function\n  // that returns totalCampaignount.\n\n  var high = 8192;\n  var low = 0;\n  var middle = 4096;\n\n  while (low < high) {\n      try {\n      await CZ.campaigns(middle);\n      low = middle + 1;\n      middle = Math.floor(low + (high - low) / 2);\n    } catch {\n      high = middle - 1;\n      middle = Math.floor(low + (high - low) / 2);\n    }\n  }\n\n  // put state data into the REDUX store for easy access from other pages and components\n\n  let data = {\n    totalCampaignCount: Math.max(low-1, 1),   // from binary search\n    userCampaignCount          //EC7 shorthand for totalCampaignCount:totalCampaignCount because of same variable name\n  };\n\n  store.dispatch(campaignCount(data));\n}\n\nexport default getCampaignCount;\n"]},"metadata":{},"sourceType":"module"}