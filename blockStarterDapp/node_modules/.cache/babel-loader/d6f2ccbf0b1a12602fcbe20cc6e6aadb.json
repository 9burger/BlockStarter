{"ast":null,"code":"var _jsxFileName = \"/home/moose970/Documents/workspace/Classes/CS458Blockchain/BlockStarter/blockStarterDapp/src/pages/MyCampaigns.js\";\nimport React, { Component } from \"react\";\nimport { Card, Grid, Input, Segment, Pagination } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport CampaignCard from \"../components/campaignCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userCampaignCount: state.userCampaignCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass MyCampaignInventory extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      CampaignTable: [],\n      activePage: 1,\n      totalPages: Math.ceil(this.props.userCampaignCount / 9)\n    };\n\n    this.componentDidMount = async () => {\n      await this.makeCampaignCards();\n    };\n\n    this.onChange = async (e, pageInfo) => {\n      await this.setState({\n        activePage: pageInfo.activePage\n      });\n      this.makeCampaignCards();\n    };\n\n    this.handleInputChange = async (e, {\n      value\n    }) => {\n      await this.setState({\n        activePage: value\n      });\n      this.makeCampaignCards();\n    };\n\n    this.makeCampaignCards = async () => {\n      const myCampaigns = await this.props.CZ.getCampaignsByOwner(this.props.userAddress);\n      let campaignTable = [];\n\n      for (var i = this.state.activePage * 9 - 9; i < this.state.activePage * 9; i++) {\n        try {\n          let z = myCampaigns[i];\n          let campaign = await this.props.CZ.campaigns(z);\n          let myDate = new Date(campaign.readyTime * 1000).toLocaleString();\n          campaignTable.push(React.createElement(CampaignCard, {\n            key: z,\n            campaignId: z.toString(),\n            campaignName: campaign.name,\n            campaignDNA: campaign.dna.toString(),\n            campaignLevel: campaign.level,\n            campaignReadyTime: myDate,\n            campaignWinCount: campaign.winCount,\n            campaignLossCount: campaign.lossCount,\n            campaignOwner: this.props.userAddress,\n            myOwner: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }));\n        } catch {\n          break;\n        }\n      }\n\n      this.setState({\n        campaignTable\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \" Your Campaign Inventory \"), \"The campaigns you own have a yellow background; clicking anywhere on a yellow card will bring up a list of actions you can perform.\", React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      columns: 2,\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      secondary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"activePage: \", this.state.activePage), React.createElement(Input, {\n      min: 1,\n      max: this.state.totalPages,\n      onChange: this.handleInputChange,\n      type: \"range\",\n      value: this.state.activePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      activePage: this.state.activePage,\n      onPageChange: this.onChange,\n      totalPages: this.state.totalPages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \" \", this.state.campaignTable, \" \"));\n  }\n\n}\n\nexport default connect(mapStateToProps)(MyCampaignInventory);","map":{"version":3,"sources":["/home/moose970/Documents/workspace/Classes/CS458Blockchain/BlockStarter/blockStarterDapp/src/pages/MyCampaigns.js"],"names":["React","Component","Card","Grid","Input","Segment","Pagination","connect","CampaignCard","mapStateToProps","state","CZ","userCampaignCount","userAddress","MyCampaignInventory","CampaignTable","activePage","totalPages","Math","ceil","props","componentDidMount","makeCampaignCards","onChange","e","pageInfo","setState","handleInputChange","value","myCampaigns","getCampaignsByOwner","campaignTable","i","z","campaign","campaigns","myDate","Date","readyTime","toLocaleString","push","toString","name","dna","level","winCount","lossCount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Grid, Input, Segment, Pagination } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport CampaignCard from \"../components/campaignCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userCampaignCount: state.userCampaignCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass MyCampaignInventory extends Component {\n  state = {\n    CampaignTable: [],\n    activePage: 1,\n    totalPages: Math.ceil(this.props.userCampaignCount / 9)\n  };\n\n  componentDidMount = async () => {\n    await this.makeCampaignCards();\n  };\n\n  onChange = async (e, pageInfo) => {\n    await this.setState({ activePage: pageInfo.activePage });\n    this.makeCampaignCards();\n  };\n\n  handleInputChange = async (e, { value }) => {\n    await this.setState({ activePage: value });\n    this.makeCampaignCards();\n  };\n  makeCampaignCards = async () => {\n    const myCampaigns = await this.props.CZ.getCampaignsByOwner(this.props.userAddress);\n    let campaignTable = [];\n    for (\n      var i = this.state.activePage * 9 - 9;\n      i < this.state.activePage * 9;\n      i++\n    ) {\n      try {\n        let z = myCampaigns[i];\n        let campaign = await this.props.CZ.campaigns(z);\n        let myDate = new Date(campaign.readyTime * 1000).toLocaleString();\n        campaignTable.push(\n          <CampaignCard\n            key={z}\n            campaignId={z.toString()}\n            campaignName={campaign.name}\n            campaignDNA={campaign.dna.toString()}\n            campaignLevel={campaign.level}\n            campaignReadyTime={myDate}\n            campaignWinCount={campaign.winCount}\n            campaignLossCount={campaign.lossCount}\n            campaignOwner={this.props.userAddress}\n            myOwner={true}\n          />\n        );\n      } catch {\n        break;\n      }\n    }\n    this.setState({ campaignTable });\n  };\n\n  render() {\n    return (\n      <div>\n        <hr />\n        <h2> Your Campaign Inventory </h2>\n        The campaigns you own have a yellow background; clicking anywhere on a\n        yellow card will bring up a list of actions you can perform.\n        <hr />\n        <Grid columns={2} verticalAlign=\"middle\">\n          <Grid.Column>\n            <Segment secondary>\n              <div>activePage: {this.state.activePage}</div>\n              <Input\n                min={1}\n                max={this.state.totalPages}\n                onChange={this.handleInputChange}\n                type=\"range\"\n                value={this.state.activePage}\n              />\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Pagination\n              activePage={this.state.activePage}\n              onPageChange={this.onChange}\n              totalPages={this.state.totalPages}\n            />\n          </Grid.Column>\n        </Grid>\n        <br /> <br />\n        <Card.Group> {this.state.campaignTable} </Card.Group>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(MyCampaignInventory);\n"]},"metadata":{},"sourceType":"module"}